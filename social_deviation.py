from data_keys import gender_keys_test, normal_datasets


class SocialDeviation():
    """
        Определение склонности к отклоняющемуся поведению (А. Н. Орел)

         Методика диагностики склонности к отклоняющемуся поведению (Определение склонности к отклоняющемуся поведению
         по А. Н. Орел) является стандартизированным тест-опросником, предназначенным для измерения готовности
         (склонности) подростков к реализации различных форм отклоняющегося поведения. Опросник представляет собой
         набор специализированных психодиагностических шкал, направленных на измерение готовности (склонности к
         реализации отдельных форм отклоняющегося поведения.

    """

    def __init__(self):
        self.gender_keys = gender_keys_test
        self.result = []
        self.raw_result = []
        self.gender = ''

    def humanize_first_scale(self):
        """
            Шкала установки на социальную желательность (служебная шкала)

            Данная шкала предназначена для измерения готовности испытуемого
            представлять себя в наиболее благоприятном свете с точки зрения
            социальной желательности.
        :return:
        """
        decryption = ''
        if self.result[0] < 50:
            decryption = "Испытуемый не склонен скрывать собственные нормы и ценности, корректировать свои ответы в направлении социальной желательности."
        if 50 < self.result[0] <= 60:
            decryption = "Умеренная тенденция давать при заполнении опросника социально-желательные ответы"
        if 60 < self.result[0] <= 70:
            decryption = "Cвидетельствует о тенденции испытуемого демонстрировать строгое соблюдение даже малозначительных социальных норм, умышленном стремлении показать себя в лучшем свете, о настороженности по отношению к ситуации обследования. "
        if 70 < self.result[0]:
            decryption = "Говорят о высокой настороженности испытуемого по отношению к психодиагностической ситуации и о сомнительной достоверности результатов по основным шкалам. "
        if self.gender == 'm' and self.raw_result[0] >= 11:
            decryption = "Cвидетельствуют о недостоверности результатов по основным шкалам. "
        return {
            'Scale': 'Шкала установки на социальную желательность',
            'ScaleValue': self.result[0],
            'RawValue': self.raw_result[0],
            'Decryption': decryption
        }

    def humanize_second_scale(self):
        """
            Шкала склонности к преодолению норм и правил

            Данная шкала предназначена для измерения предрасположенности
            испытуемого к преодолению каких-либо норм и правил, склонности к
            отрицанию общепринятых норм и ценностей, образцов поведения.
        :return:
        """
        decryption = ''
        if self.result[1] < 50:
            decryption = "свидетельствуют о конформных установках испытуемого, склонности следовать стереотипам и общепринятым нормам поведения"
        if 50 < self.result[1] <= 60:
            decryption = "свидетельствуют о выраженности вышеуказанных тенденций, о нонкомформистских установках испытуемого, о его склонности противопоставлять собственные нормы и ценности групповым, о тенденции «нарушать спокойствие», искать трудности, которые можно было бы преодолеть."
        if 60 < self.result[1] <= 70:
            decryption = "свидетельствуют о чрезвычайной выраженности нонконформистских тенденций, проявлении негативизма и заставляют сомневаться в достоверности результатов тестирования по данной шкале."
        return {
            'Scale': 'Шкала склонности к преодолению норм и правил',
            'ScaleValue': self.result[1],
            'RawValue': self.raw_result[1],
            'Decryption': decryption
        }

    def humanize_third_scale(self):
        """
            Шкала склонности к аддиктивному поведению

            Данная шкала предназначена для измерения готовности реализовать
            аддиктивное поведение.
        :return:
        """
        decryption = ''
        if self.result[2] < 50:
            decryption = "свидетельствуют либо о невыраженности вышеперечисленных тенденций, либо о хорошем социальном контроле поведенческих реакций. "
        if 50 < self.result[2] <= 70:
            decryption = "свидетельствуют о предрасположенности испытуемого к уходу от реальности посредством изменения своего психического состояния, о склонностях к иллюзорнокомпенсаторному способу решения личностных проблем. Кроме того, эти результаты свидетельствуют об ориентации на чувственную сторону жизни, о наличии «сенсорной жажды», о гедонистически ориентированных нормах и ценностях."
        if self.result[2] > 70:
            decryption = "свидетельствует о сомнительности результатов либо о наличии выраженной психологической потребности в аддиктивных состояниях, что необходимо выяснять, используя дополнительные психодиагностические средства."
        return {
            'Scale': 'Шкала склонности к аддиктивному поведению',
            'ScaleValue': self.result[2],
            'RawValue': self.raw_result[2],
            'Decryption': decryption
        }

    def humanize_fourth_scale(self):
        """
            Шкала склонности к самоповреждающему и саморазрушающему поведению

            Данная шкала предназначена для измерения готовности реализовать
            различные формы аутоагрессивного поведения.
        :return:
        """
        decryption = ''
        if self.result[3] < 50:
            decryption = "свидетельствуют об отсутствии готовности к реализации саморазрушающего поведения, об отсутствии тенденции к соматизации тревоги, отсутствии склонности к реализации комплексов вины в поведенческих реакциях."
        if 50 < self.result[3] <= 70:
            decryption = "свидетельствуют о низкой ценности собственной жизни, склонности к риску, выраженной потребности в острых ощущениях, о садо-мазохистских тенденциях."
        if self.result[3] > 70:
            decryption = " свидетельствуют о сомнительной достоверности результатов. "
        return {
            'Scale': 'Шкала склонности к самоповреждающему и саморазрушающему поведению',
            'ScaleValue': self.result[3],
            'RawValue': self.raw_result[3],
            'Decryption': decryption
        }

    def humanize_fifth_scale(self):
        """
            Шкала склонности к агрессии и насилию

            Данная шкала предназначена для измерения готовности испытуемого к
            реализации агрессивных тенденций в поведении.
        :return:
        """
        decryption = ''
        if self.result[4] < 50:
            decryption = "Свидетельствуют о невыраженности агрессивных тенденций, о неприемлемости насилия как средства решения проблем, о нетипичности агрессии как способа выхода из фрустрирующей ситуации."
        if 50 < self.result[4] <= 60:
            decryption = "Свидетельствуют о наличии агрессивных тенденций у испытуемого"
        if 60 < self.result[4] <= 70:
            decryption = "Свидетельствуют об агрессивной направленности личности во взаимоотношениях с другими людьми, о склонности решать проблемы посредством насилия, о тенденции использовать унижение партнера по общению как средство стабилизации самооценки, о наличии садистических тенденций."
        if self.result[4] > 70:
            decryption = "Свидетельствуют о сомнительной достоверности результатов. "
        return {
            'Scale': 'Шкала склонности к агрессии и насилию',
            'ScaleValue': self.result[4],
            'RawValue': self.raw_result[4],
            'Decryption': decryption
        }

    def humanize_sixth_scale(self):
        """
            Шкала волевого контроля эмоциональных реакций

            Данная шкала предназначена для измерения склонности испытуемого
            контролировать поведенческие проявления эмоциональных реакций
        :return:
        """
        decryption = ''
        if self.result[5] <= 50:
            decryption = "Свидетельствуют о невыраженности этих тенденций, о жестком самоконтроле любых поведенческих эмоциональных реакций, чувственных влечений"
        if 60 < self.result[5] <= 70:
            decryption = "свидетельствует о слабости волевого контроля эмоциональной сферы, о нежелании или неспособности контролировать поведенческие проявления эмоциональных реакций"
        if self.result[5] > 70:
            decryption = "свидетельствует о отсутсвии волевого контроля эмоциональной сферы, о нежелании или неспособности контролировать поведенческие проявления эмоциональных реакций"

        return {
            'Scale': 'Шкала волевого контроля эмоциональных реакций',
            'ScaleValue': self.result[5],
            'RawValue': self.raw_result[5],
            'Decryption': decryption
        }

    def humanize_seventh_scale(self):
        """
            Шкала склонности к деликвентному поведению

            Название шкалы носит условный характер, так как шкала сформирована из
            утверждений, дифференцирующих «обычных» подростков и лиц с
            зафиксированными правонарушениями, вступавших в конфликт с
            общепринятым образом жизни и правовыми нормами.

            На наш взгляд, данная шкала измеряет готовность (предрасположенность)
            подростков к реализации деликвентного поведения. Выражаясь
            метафорически, шкалы выявляет «деликвентный потенциал», который лишь
            при определенных обстоятельствах может реализоваться в жизни подростка.
        :return:
        """
        decryption = ''
        if self.result[6] <= 50:
            decryption = "Говорят о невыражености указанных тенденций, что в сочетании с высокими показателями по шкале социальной желательности может свидетельствовать о высоком уровне социального контроля."
        if self.result[6] > 60:
            decryption = "Cвидетельствуют о высокой готовности к реализации деликвентного поведения. "
        if 50 <= self.result[6] <= 60:
            decryption = "Cвидетельствуют о наличии деликвентных тенденций у испытуемого и о низком уровне социального контроля."
        return {
            'Scale': 'Шкала склонности к деликвентному поведению',
            'ScaleValue': self.result[6],
            'RawValue': self.raw_result[6],
            'Decryption': decryption
        }

    def humanize_result(self):
        human_result = [
            self.humanize_first_scale(),
            self.humanize_second_scale(),
            self.humanize_third_scale(),
            self.humanize_fourth_scale(),
            self.humanize_fifth_scale(),
            self.humanize_sixth_scale(),
            self.humanize_seventh_scale(),
        ]
        return human_result

    def get_on_scale_result_value(self):
        return [
            {
                'Scale': 'Шкала установки на социальную желательность',
                'Value': self.result[0]
            },
            {
                'Scale': 'Шкала склонности к преодолению норм и правил',
                'Value': self.result[1]
            },
            {
                'Scale': 'Шкала склонности к аддиктивному поведению',
                'Value': self.result[2]
            },
            {
                'Scale': 'Шкала склонности к самоповреждающему и саморазрушающему поведению ',
                'Value': self.result[3]
            },
            {
                'Scale': 'Шкала склонности к агрессии и насилию',
                'Value': self.result[4]
            },
            {
                'Scale': 'Шкала волевого контроля эмоциональных реакций',
                'Value': self.result[5]
            },
            {
                'Scale': 'Шкала склонности к деликвентному поведению',
                'Value': self.result[6]
            },
        ]

    def correction_result(self):
        if self.gender == 'm':
            if self.raw_result[0] <= 6:
                self.result[1] += self.result[1] * 0.3
                self.result[2] += self.result[2] * 0.3
                self.result[3] += self.result[3] * 0.2
                self.result[4] += self.result[4] * 0.2
                self.result[5] += self.result[5] * 0.3
                self.result[6] += self.result[6] * 0.2
            if self.raw_result[0] > 6:
                self.result[1] += self.result[1] * 0.7
                self.result[2] += self.result[2] * 0.6
                self.result[3] += self.result[3] * 0.4
                self.result[4] += self.result[4] * 0.5
                self.result[5] += self.result[5] * 0.3
                self.result[6] += self.result[6] * 0.5
        if self.gender == 'f':
            self.result[1] += self.result[1] * 0.4
            self.result[2] += self.result[2] * 0.4
            self.result[3] += self.result[3] * 0.2
            self.result[4] += self.result[4] * 0.3
            self.result[5] += self.result[5] * 0.5
            self.result[6] += self.result[6] * 0.4

    def process_answer(self, answer, gender):
        self.gender = gender
        check_keys = []
        if gender == 'f':
            print('female')
            check_keys = self.gender_keys[0]
        if gender == 'm':
            print('male')
            check_keys = self.gender_keys[1]

        for index, check in enumerate(check_keys):
            X = 0
            for keys in check:
                inx = keys[0]
                right_answer = keys[1]
                if gender == 'm' and inx == 98:
                    break
                if answer[inx]['answer'] == right_answer:
                    X += 1
            self.raw_result.append(X)
            M = normal_datasets[index][0]
            S = normal_datasets[index][1]
            T = 10 * (X - M) / S + 50
            self.result.append(T)
        self.correction_result()
